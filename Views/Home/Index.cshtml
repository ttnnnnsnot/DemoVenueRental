<div class="container-fluid p-0 position-relative index-banner">
    <div id="backgroundImgChange">
        <index-banner></index-banner>
    </div>
        
    <div class="container-fluid h-100 index-banner-content">
        <div class="row row-cols-1 h-100">
            <div class="col text-center text-light align-content-center">
                <h1 class="animate__animated animate__backInLeft">Demo Venue Rental</h1>
                <h3 class="animate__animated animate__backInRight">Test Rental</h3>
            </div>
            <div class="col align-content-center">
                <div class="row justify-content-center">
                    <div v-for="(item, index) in selectTypes" :key="index" class="col-4 col-sm-3 col-lg-2 animate__animated animate__fadeInDown">
                        <index-select-type :select-type="item.data" v-on:data-change="(text) => fnChangeText(index, text)"></index-select-type>
                    </div>
                    <div class="col-4 col-sm-3 col-lg-2 animate__animated animate__fadeInDown">                        
                        <button type="button" class="btn btn-danger w-100" v-on:click="search">找尋場所</button>
                    </div>
                </div>                
            </div>
        </div>
    </div>    
</div>

@section Scripts{
    <script src="components/IndexBanner.js" asp-append-version="true"></script>
    <script src="components/IndexSelectType.js" asp-append-version="true"></script>

    <script>

        // $.validator.unobtrusive.options = {
        //     invalidHandler: function (event, validator) {
        //         // 在整個表單驗證失敗時觸發其他動作
        //     },
        // };

        const loginOption = () => {
            const Email = ref('');
            const PasswordHash = ref('');

            const login = async (event) => {
                event.preventDefault();

                if (!$("#registModalForm").valid())
                    return;
                
                const data = JSON.stringify({
                    Email: Email.value,
                    PasswordHash: PasswordHash.value
                });

                try {
                    const results = await fetchWithParams("Login", data, "POST");
                    console.log(results);
                } catch (error) {
                    console.error('Error:', error);
                }
            }

            return {
                login,
                Email,
                PasswordHash
            }
        }













        const fetchData1 = () => fetchWithParams('def/sport');
        const fetchData2 = () => fetchWithParams('def/area');

        const searchInputOption = (selectTypes) => {
            const search = () => {
                const results = selectTypes.map(type => {

                    if (isEmptyObject(type.data))
                        return '';

                    const selectedItem = type.data.listItem.find(item => item.name === type.data.defaultText);
                    return selectedItem ? selectedItem : '';
                });

                console.log(`Results: ${results.map(item => item ? item.name : '').join(', ')}`);
            }

            return {
                search
            }
        }

        const appOption = {
            components: {
                'index-select-type': indexSelectTypeOption,
                'index-banner': indexBannerOption
            },
            setup() {
                
                const {
                    selectTypes,
                    fnChangeText,
                    onMounted
                } = indexSelectMore([fetchData1, fetchData2]);
                
                const {
                    search
                } = searchInputOption(selectTypes);

                const {
                    login,
                    Email,
                    PasswordHash
                } = loginOption();

                onMounted(async () => {
                    await onMounted();
                });

                return {
                    fnChangeText,
                    selectTypes,
                    search,
                    login,
                    Email,
                    PasswordHash
                }
            }
        };

        const app = createApp(appOption);

        app.mount("#app");
    </script>
}


